#ifndef CALENDAR_CALENDAR_DATA_H
#define CALENDAR_CALENDAR_DATA_H

#include "stdint.h"

#define EXTREME_SEASON 0

/**
 * @brief 定义数据起始年份 (公历)
 */
extern const uint16_t start_year;

/**
 * @brief 定义数据终止年份 (不包含该年)
 */
extern const uint16_t end_year;

/**
 * @brief 1599年农历十月及以后的闰月索引, 对应cPreMonth中的序号, 当前为-1, 表示1599年农历十月以后无闰月.
 */
extern int const pre_leap_index;

/**
 * @brief 1599年农历十月及以后的月份, 每月初一在1600年的年内序数. preMonth中分别对应农历的十月、冬月、腊月、正月.
 */
extern int const pre_month[4];

/**
 * @brief 农历月份信息, 一年用4个字节表示.
 * @brief +-------------------------------------------------------------------------------------------------------+
 * @brief | 第31位 |  第30-27位   |  第26-23位   |        第22-17位       |  第16-13位 |         第12-0位         |
 * @brief |--------+--------------+--------------+------------------------+------------+--------------------------|
 * @brief |  保留  | 元旦天干序数 | 元旦地支序数 | 农历正月初一的年内序数 |    闰月    | 一个比特对应一个月份大小 |
 * @brief +-------------------------------------------------------------------------------------------------------+
 * @brief 月份大小数据是月份小的在低位, 月份大的在高位, 即正月在最低位.
 * @brief 以1900年为例, 3个字节的数据展开成二进制位:
 * @brief   0     0000       1010        011110       1000                  1 0 1 1 0 1 1 0 1 0 0 1 0
 * @brief 保留    0(甲)     10(戌)   1月31日(春节)   闰八月   从左往右依次腊月, 冬月...闰八月, 八月, 七月...正月的天数
 * @brief 农历月份对应的位为0, 表示这个月为29天(小月), 为1表示有30天(大月).
 */
extern const uint32_t month_info[4800 + 1];

/**
 * @brief 二十四节气信息. 一年用6个字节表示, 每个节气使用两比特数据. 节气数据将由 "solar_terms_source[220]" 和 "solar_terms_index[14400]" 中的数据生成.
 * @brief +-------------------------------------------------------+
 * @brief | 第一字节最高两位 |  第一字节其余6位至第六字节共46个位 |
 * @brief |------------------+------------------------------------|
 * @brief |小寒的年内序数减3 | 每个节气距离上一节气的天数, 共23组 |
 * @brief +-------------------------------------------------------+
 * @brief 小寒的年内序数已给出, 剩下的23个节气分别对应这23组数据, 有以下含义:
 * @brief +-------------------------------------------------------+
 * @brief |  二进制位 | 意义 |                描述                |
 * @brief |-----------+------+------------------------------------|
 * @brief |     00    | 14天 |  当前对应的节气距离上一节气为14天  |
 * @brief |-----------+------+------------------------------------|
 * @brief |     01    | 15天 |  当前对应的节气距离上一节气为15天  |
 * @brief |-----------+------+------------------------------------|
 * @brief |     10    | 16天 |  当前对应的节气距离上一节气为16天  |
 * @brief |-----------+------+------------------------------------|
 * @brief |     11    | 17天 |  当前对应的节气距离上一节气为17天  |
 * @brief +-------------------------------------------------------+
 * @brief 由上表可以看出, 除小寒以外的其余23个节气的两比特数据加上14就是距离上一节气的天数.
 * @brief 节气顺序:
 * @brief 小寒 大寒 立春 雨水 惊蛰 春分 清明 谷雨 立夏 小满 芒种 夏至
 * @brief 小暑 大暑 立秋 处暑 白露 秋分 寒露 霜降 立冬 小雪 大雪 冬至
 */
extern const uint16_t solar_terms_source[220];

/**
 * @brief 节气数据的索引表, 数据对应“solar_terms_source[220]”中的索引.
 * @brief 比如, 起始年份 (1600年) 的节气数据为: solar_terms_source[solar_terms_index[0]], solar_terms_source[solar_terms_index[1]],solar_terms_source[solar_terms_index[2]]这三个16位 (6字节) 数据.
 */
extern const uint8_t solar_terms_index[14400];

#if defined(EXTREME_SEASON) && (EXTREME_SEASON == 1)
/**
 * @brief 1599年冬至日在1600年的年内序数, 这个数据将被用在1600年“数九”的计算上.
 */
extern char const preDongzhiOrder;

/**
 * @brief 每年数九、入梅、出梅及三伏信息, 一年用两个字节表示.
 * @brief +---------------------------------------------------+
 * @brief |  第15-11位 |  第10-6位  |  第5-1位   |   最末位   |
 * @brief |------------+------------+------------+------------|
 * @brief |    入梅    |    出梅    |    初伏    |    末伏    |
 * @brief +---------------------------------------------------+
 * @brief 1.“一九”即是冬至, 往后到“九九”的每个“九”相差9天, 可顺利推算出来, 故“数九”信息省略.
 * @brief 2.“三伏”天的“中伏”在“初伏”后10天, 而“末伏”在“中伏”后10天或20天, 因此“中伏”信息省略.
 * @brief 入梅信息: 该天数加上150为入梅这一日的年内序数.
 * @brief 出梅信息: 该天数加上180为出梅这一日的年内序数.
 * @brief 初伏信息: 该天数加上180为初伏这一日的年内序数.
 * @brief 末伏信息: 若该位为“1”, 表示末伏距离初伏30天, 为“0”表示末伏距离初伏20天.
 */
extern const uint16_t extremeSeason[];
#endif

#endif //CALENDAR_CALENDAR_DATA_H
